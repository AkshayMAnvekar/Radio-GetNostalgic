const router = require("express")()

const { DedicateList } = require('../../BusinessLogic') 

/**
 * @swagger
 *
 * /dedicate/track:
 *   post:
 *     tags: ["api"]
 *     summary: Dedicate or request track with or without message
 *     consumes:
 *       - application/json 
 *     produces:
 *       - application/json
 *     parameters:
 *     - in: "body"
 *       name: "body"
 *       type: object
 *       properties:
 *         track_id:
 *           type: integer
 *           example: 1197
 *           required: true
 *         message:
 *           type: object
 *           properties:
 *             content:
 *               type: string
 *               minLength: 0
 *               maxLength: 200
 *               example: A sentence of about 200 characters Max 
 *             name:
 *               type: string
 *               minLength: 0
 *               maxLength: 50
 *               example: your Name
 *     responses:
 *       400:
 *         description: Invalid input error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/response_errors/400'
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/response_errors/500'
 *       200:
 *         description: when dedication is successful, Song Dedication Id generated by default, Message Id is generated only if message is present
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 dl_id:
 *                   type: integer
 *                   example: 34
 *                 msg_id:
 *                   type: integer
 *                   example: 24
 */
router.post('/track', async (req, res)=>{
    let track_id = request.body.track_id
    let message = request.body.message
    try{
        if(!track_id || isNaN(track_id)){
            res.status(400).json({ error: "Track ID is must and should be a number"})
            return
        }

        if(message && message.content){
            if(!(message.content && message.name)){
                res.status(400).json({ error: "Message sender name and content both must present" })
                return
            }
        }

        // check this track is already played one hour before
        let { status, track_path } = await DedicateList.checkTrackPlayed(track_id)

        if(status){
            res.status(409).json({ error: "Sorry, The selected track has already been played. Try again after one hour !!!" })
            return
        }        

        // if not played add to the dedicatelist and add message if present
        let { dl_id, msg_id } = await DedicateList.addTrack({track_id, track_path}, message)

        res.status(200).json({ dl_id, msg_id })
    }catch(err){
        res.status(500).json({ error:'Internal Server Error', actualErr: err })
    }
})

/**
 * @swagger
 *
 * /dedicate/message:
 *   post:
 *     tags: ["api"]
 *     summary: Send message without dedication track
 *     consumes:
 *       - application/json 
 *     produces:
 *       - application/json
 *     parameters:
 *     - in: "body"
 *       name: "body"
 *       type: object
 *       properties:
 *         message:
 *           type: object
 *           properties:
 *             content:
 *               type: string
 *               required: true
 *               minLength: 0
 *               maxLength: 200
 *               example: A sentence of about 200 characters Max 
 *             name:
 *               type: string
 *               required: true
 *               minLength: 0
 *               maxLength: 50
 *               example: your Name
 *     responses:
 *       400:
 *         description: Invalid input error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/response_errors/400'
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/response_errors/500'
 *       200:
 *         description: "After successful"
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 msg:
 *                   type: string
 *                   example: Posted Successfully
 */
router.post('/message', async (req, res)=>{
    let message = req.body.message
    try{
        if(message && message.content){
            if(!(message.content && message.name)){
                res.status(400).json({ error: "Message sender name and content both must present" })
                return
            }
        }

        message.isDedicated = false

        io.sockets.emit('message', message)

        res.status(200).json({ msg: "Posted Successfully" })
    }catch(err){
        res.status(500).json({ error:'Internal Server Error', actualErr: err })
    }
})

module.exports = router